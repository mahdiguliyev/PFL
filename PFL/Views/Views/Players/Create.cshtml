@model PFL.Models.ViewModels.PlayerCreateViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string action = ViewBag.Action;
    string baseUrl = ViewBag.BaseUrl;
}

@section before_app_scripts
{
    <script type="text/javascript" src="/assets/js/plugins/notifications/jgrowl.min.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/ui/moment/moment.min.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/pickers/daterangepicker.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/pickers/anytime.min.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/pickers/pickadate/picker.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/pickers/pickadate/picker.date.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/pickers/pickadate/picker.time.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/pickers/pickadate/legacy.js"></script>
}

@section after_app_scripts{
    <script type="text/javascript" src="/assets/js/pages/picker_date.js?5"></script>
}

<div class="panel panel-flat">
    
    <div class="panel-heading">
        <h5 class="panel-title">Futbolçu</h5>
        <div class="heading-elements">
            <ul class="icons-list">
                <li>
                    <div class="btn-group" style="width: 100%">
                        <a href="/Players" type="button" style="width: 100%" class="btn bg-teal-400 btn-labeled"><b><i class="icon-backward2"></i></b> <span>Futbolçuların siyahısı</span></a>
                    </div>
                </li>
            </ul>
        </div>
    </div>
    <div class="panel-body">
        <p class="content-group-lg">Yeni futbolçunun əlavə edilməsi</p>

        @using (Html.BeginForm(action, baseUrl, FormMethod.Post,
            new { @class = "form-horizontal", encType = "multipart/form-data" }))
        {
            <fieldset class="content-group col-md-8 col-md-offset-2">

                @Html.AntiForgeryToken()
                <input type="hidden" name="Id" value="@(Model?.Id??0)" />



                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    @Html.LabelFor(model => model.PhotoUpload, "Şəkil ", new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.PhotoUpload, new { @class = "file-input-2", type = "file", name = "Files", data_show_caption = "false", data_show_upload = "false" })
                        @Html.ValidationMessageFor(model => model.PhotoUpload, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, "Ad", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, "Soyad", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FatherName, "Ata adı", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.FatherName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FatherName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BirthDate, "Doğum tarixi", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        <div class="input-group">
                            <span class="input-group-addon"><i class="icon-calendar3"></i></span>
                            @Html.TextBoxFor(model => model.BirthDate, Model?.BirthDate?.ToString("dd MMM, yyyy"), new { @class = "form-control pickadate-selectors" })
                        </div>

                        @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CitizenshipId, "Vətəndaşlığı", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        @Html.DropDownList("CitizenshipId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CitizenshipId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CurrentClubId, "Cari klubu", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                            @Html.DropDownList("CurrentClubId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CurrentClubId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-4" for="IsReversePlayer">Əvəzedici heyət</label>
                    <div class="col-md-1">
                        @Html.CheckBoxFor(model => model.IsReversePlayer, new { @class = "form-control" })
                    </div>
                    <div class="col-md-5 col-md-offset-1">
                        @Html.ValidationMessageFor(model => model.IsReversePlayer, "", new { @class = "text-danger" })
                    </div>
                </div>
                
                
                @*<div class="form-group">
                    @Html.LabelFor(model => model.FromClubId, "Hansı klubdan", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-3">
                        @Html.DropDownList("FromClubId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.FromClubId, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.FromClubName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FromClubName, "", new { @class = "text-danger" })
                    </div>
                </div>*@
                
                <div class="form-group">
                    <label class="control-label col-md-3" for="FromClubId">Hansı klubdan</label>

                    <div class="col-md-3">
                        <select class="border-warning" id="FromClubId" name="FromClubId">
                            @if (Model != null && Model.FromClubId > 0)
                            {
                                <option value="@Model.FromClubId">@Model.FromClubName</option>
                            }
                            else
                            {
                                <option value="0"></option>
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.FromClubName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FromClubName, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.ContractBeginDate, "Müqavilənin başlama tarixi", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        <div class="input-group">
                            <span class="input-group-addon"><i class="icon-calendar3"></i></span>
                            @Html.TextBoxFor(model => model.ContractBeginDate, Model?.ContractBeginDate?.ToString("dd MMM, yyyy"), new { @class = "form-control pickadate-selectors" })
                        </div>
                        @Html.ValidationMessageFor(model => model.ContractBeginDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ContractEndDate, "Müqavilənin bitmə tarixi", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        <dic class="input-group">
                            <span class="input-group-addon"><i class="icon-calendar3"></i></span>
                            @Html.TextBoxFor(model => model.ContractEndDate, Model?.ContractEndDate?.ToString("dd MMM, yyyy"), new { @class = "form-control pickadate-selectors" })
                        </dic>
                        @Html.ValidationMessageFor(model => model.ContractEndDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ContractTypeId, "Müqavilənin tipi", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        @Html.DropDownList("ContractTypeId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ContractTypeId, "", new { @class = "text-danger" })
                    </div>
                </div>

                @*<div class="form-group">
                    @Html.LabelFor(model => model.PlayerNumber, "Nömrə", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.PlayerNumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PlayerNumber, "", new { @class = "text-danger" })
                    </div>
                </div>*@

                <div class="form-group">
                    @Html.LabelFor(model => model.PositionTypeId, "Mövqe", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        @Html.DropDownList("PositionTypeId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.PositionTypeId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Yadda saxla" class="btn btn-primary col-md-12" />
                    </div>
                </div>

            </fieldset>
        }
    </div>
</div>


<script>


    $('#CitizenshipId').select2({
        dropdownCssClass: 'border-primary',
        containerCssClass: 'border-primary text-primary-700',
        ajax: {
            url: "/Select2/Countries",
            dataType: 'json',
            delay: 250,
            data: function(params) {
                return {
                    searchText: params.term, // search term
                    page: params.page
                };
            },
            processResults: function(data, params) {

                params.page = params.page || 1;

                return {
                    results: data.results,
                    pagination: {
                        more: (params.page * 30) < data.total_count
                    }
                };
            },
            cache: true
        }
    });

    $('#CurrentClubId').select2({
        dropdownCssClass: 'border-primary',
        containerCssClass: 'border-primary text-primary-700',
        ajax: {
            url: "/Select2/Clubs",
            dataType: 'json',
            delay: 250,
            data: function(params) {
                return {
                    searchText: params.term, // search term
                    page: params.page
                };
            },
            processResults: function(data, params) {

                params.page = params.page || 1;

                return {
                    results: data.results,
                    pagination: {
                        more: (params.page * 30) < data.total_count
                    }
                };
            },
            cache: true
        }
    });


    $('#FromClubId').select2({
        dropdownCssClass: 'border-primary',
        containerCssClass: 'border-primary text-primary-700',
        ajax: {
            url: "/Select2/Clubs",
            dataType: 'json',
            delay: 250,
            data: function(params) {
                return {
                    searchText: params.term, // search term
                    page: params.page
                };
            },
            processResults: function(data, params) {

                params.page = params.page || 1;

                return {
                    results: data.results,
                    pagination: {
                        more: (params.page * 30) < data.total_count
                    }
                };
            },
            cache: true
        }
    });


    $(document).ready(function() {


        @{
        string playerPhotoJs = "";

        if (Model != null)
        {
            playerPhotoJs = "initialPreview: \"<img src='" + Model.PhotoPath + "' class='file-preview-image' style='width: 100%; height: 160px;'>\", deleteUrl: \"#\", overwriteInitial: true, maxFileSize: 100,";
        }



    }


        $("#PhotoUpload").fileinput({
            browseLabel: 'Seçim edin',
            browseIcon: '<i class="icon-file-plus"></i>',
            uploadIcon: '<i class="icon-file-upload2"></i>',
            removeLabel: 'Ləğv edin',
            removeIcon: '<i class="icon-cross3"></i>',
            layoutTemplates: {
                icon: '<i class="icon-file-check"></i>'
            },
            initialCaption: "Fayl seçilməyib",
            @Html.Raw(playerPhotoJs)

        });

    });


</script>