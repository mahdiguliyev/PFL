@model PFL.Models.DTO.MatchCreateDto
@{
    Layout = null;
    string action = ViewBag.Action;
    string baseUrl = ViewBag.BaseUrl;
}









@using (Html.BeginForm(action, baseUrl, FormMethod.Post,
    new { @class = "form-horizontal", id = "add-match-form" }))
{
    <label class="label label-danger col-md-12" style="font-size: 14px;" id="validation-message"></label>
    <br />
    <br />

    <fieldset class="content-group">

        @Html.AntiForgeryToken()
        <input type="hidden" name="Id" value="@(Model?.Id??0)" />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


        @Html.Hidden("TournamentTourId", (int)ViewBag.TournamentTourId)

        <div class="form-group">
            @Html.LabelFor(model => model.HomeClubId, "Klub (ev)", htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.DropDownList("HomeClubId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.HomeClubId, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-4">
                @Html.CheckBoxFor(model => model.HomeClubTechnicalDefeat)
                <label class="control-label" for="HomeClubTechnicalDefeat">Texniki məğlubiyyət</label>
            </div>
        </div>

        <div class="form-group" id="home-club-note" style="@((Model != null && !Model.HomeClubTechnicalDefeat) ? "display:none":"")">
            @Html.Label("HomeClubTechnicalDefeatNote", "Texniki məğlubiyyətin səbəbi", htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.HomeClubTechnicalDefeatNote, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.HomeClubTechnicalDefeatNote, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GuestClubId, "Klub (qonaq)", htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.DropDownList("GuestClubId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.GuestClubId, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                @Html.CheckBoxFor(model => model.GuestClubTechnicalDefeat)
                <label class="control-label" for="GuestClubTechnicalDefeat">Texniki məğlubiyyət</label>
            </div>
        </div>

        <div class="form-group" id="guest-club-note" style="@(Model != null && !Model.GuestClubTechnicalDefeat ? "display:none":"")">
            @Html.Label("GuestClubTechnicalDefeatNote", "Texniki məğlubiyyətin səbəbi", htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.GuestClubTechnicalDefeatNote, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.GuestClubTechnicalDefeatNote, "", new { @class = "text-danger" })
            </div>
        </div>

        <div style="width: 100%;@((Model != null && (Model.HomeClubTechnicalDefeat || Model.GuestClubTechnicalDefeat)) ? "display:none":"")" id="match-detail">

            <div class="form-group">
                @Html.LabelFor(model => model.StadiumId, "Stadion", htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @if (Model?.StadiumId != null)
                    {
                        @Html.DropDownList("StadiumId", null, htmlAttributes: new { @class = "form-control" })
                    }
                    else
                    {
                        <select class="border-blue form-control" id="StadiumId" name="StadiumId">
                            <option value="0">Seçim edin</option>
                        </select>
                    }

                    @Html.ValidationMessageFor(model => model.StadiumId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MatchDate, "Oyunun tarixi", htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-addon"><i class="icon-calendar3"></i></span>
                        @Html.TextBoxFor(model => model.MatchDate, Model?.MatchDate?.ToString("dd MMM, yyyy"), new { @class = "form-control pickadate-selectors" })
                    </div>

                    @Html.ValidationMessageFor(model => model.MatchDate, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    <div class="input-group">
                        <span class="input-group-addon"><i class="icon-watch2"></i></span>
                        @Html.TextBoxFor(model => model.MatchTime, Model?.MatchTime?.ToString("HH:mm"), new { @class = "form-control pickadate-selectors" })
                    </div>

                    @Html.ValidationMessageFor(model => model.MatchTime, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.RefereeId, "Baş hakim", htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @if (Model?.RefereeId != null)
                    {
                        @Html.DropDownList("RefereeId", null, htmlAttributes: new { @class = "form-control referee" })
                    }
                    else
                    {
                        <select class="border-blue form-control referee" id="RefereeId" name="RefereeId">
                            <option value="0">Seçim edin</option>
                        </select>
                    }

                    @Html.ValidationMessageFor(model => model.RefereeId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.RefereeAssistant1Id, "B/h köməkçisi", htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @if (Model?.RefereeAssistant1Id != null)
                    {
                        @Html.DropDownList("RefereeAssistant1Id", null, htmlAttributes: new { @class = "form-control referee" })
                    }
                    else
                    {
                        <select class="border-blue form-control referee" id="RefereeAssistant1Id" name="RefereeAssistant1Id">
                            <option value="0">Seçim edin</option>
                        </select>
                    }

                    @Html.ValidationMessageFor(model => model.RefereeAssistant1Id, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.RefereeAssistant2Id, "B/h köməkçisi", htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @if (Model?.RefereeAssistant2Id != null)
                    {
                        @Html.DropDownList("RefereeAssistant2Id", null, htmlAttributes: new { @class = "form-control referee" })
                    }
                    else
                    {
                        <select class="border-blue form-control referee" id="RefereeAssistant2Id" name="RefereeAssistant2Id">
                            <option value="0">Seçim edin</option>
                        </select>
                    }

                    @Html.ValidationMessageFor(model => model.RefereeAssistant2Id, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FourthRefereeId, "4-cü hakim", htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @if (Model?.FourthRefereeId != null)
                    {
                        @Html.DropDownList("FourthRefereeId", null, htmlAttributes: new { @class = "form-control referee" })
                    }
                    else
                    {
                        <select class="border-blue form-control referee" id="FourthRefereeId" name="FourthRefereeId">
                            <option value="0">Seçim edin</option>
                        </select>
                    }

                    @Html.ValidationMessageFor(model => model.FourthRefereeId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.AffaRepresentativeId, "AFFA nümayəndəsi", htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @if (Model?.AffaRepresentativeId != null)
                    {
                        @Html.DropDownList("AffaRepresentativeId", null, htmlAttributes: new { @class = "form-control referee-affa" })
                    }
                    else
                    {
                        <select class="border-blue form-control referee-affa" id="AffaRepresentativeId" name="AffaRepresentativeId">
                            <option value="0">Seçim edin</option>
                        </select>
                    }

                    @Html.ValidationMessageFor(model => model.AffaRepresentativeId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.RefereeInspectorId, "Hakim-inspektor", htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @if (Model?.RefereeInspectorId != null)
                    {
                        @Html.DropDownList("RefereeInspectorId", null, htmlAttributes: new { @class = "form-control referee-inspector" })
                    }
                    else
                    {
                        <select class="border-blue form-control referee-inspector" id="RefereeInspectorId" name="RefereeInspectorId">
                            <option value="0">Seçim edin</option>
                        </select>
                    }

                    @Html.ValidationMessageFor(model => model.RefereeInspectorId, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

    </fieldset>
}

<script>

    $(document).ready(function () {
        $('#MatchDate').pickadate({
            selectYears: true,
            selectMonths: true
        });

        $('#MatchTime').pickatime({
            format: "HH:i",
            formatSubmit: 'HH:i',
            interval: 5,
            editable: true
        });

    });


    $('.referee').select2({
        dropdownParent: $('#match-modal'),
        dropdownCssClass: 'border-primary',
        containerCssClass: 'border-primary text-primary-700',
        ajax: {
            url: "/Select2/Referees?refereeTypeId=1",
            dataType: 'json',
            delay: 250,
            data: function (params) {
                return {
                    searchText: params.term, // search term
                    page: params.page
                };
            },
            processResults: function (data, params) {

                params.page = params.page || 1;

                return {
                    results: data.results,
                    pagination: {
                        more: (params.page * 30) < data.total_count
                    }
                };
            },
            cache: true
        }
    });

    $('.referee-affa').select2({
        dropdownParent: $('#match-modal'),
        dropdownCssClass: 'border-primary',
        containerCssClass: 'border-primary text-primary-700',
        ajax: {
            url: "/Select2/Referees?refereeTypeId=2",
            dataType: 'json',
            delay: 250,
            data: function (params) {
                return {
                    searchText: params.term, // search term
                    page: params.page
                };
            },
            processResults: function (data, params) {

                params.page = params.page || 1;

                return {
                    results: data.results,
                    pagination: {
                        more: (params.page * 30) < data.total_count
                    }
                };
            },
            cache: true
        }
    });


    $('.referee-inspector').select2({
        dropdownParent: $('#match-modal'),
        dropdownCssClass: 'border-primary',
        containerCssClass: 'border-primary text-primary-700',
        ajax: {
            url: "/Select2/Referees?refereeTypeId=3",
            dataType: 'json',
            delay: 250,
            data: function (params) {
                return {
                    searchText: params.term, // search term
                    page: params.page
                };
            },
            processResults: function (data, params) {

                params.page = params.page || 1;

                return {
                    results: data.results,
                    pagination: {
                        more: (params.page * 30) < data.total_count
                    }
                };
            },
            cache: true
        }
    });


    $('#StadiumId').select2({
        dropdownParent: $('#match-modal'),
        dropdownCssClass: 'border-primary',
        containerCssClass: 'border-primary text-primary-700',
        ajax: {
            url: "/Select2/Stadiums",
            dataType: 'json',
            delay: 250,
            data: function (params) {
                return {
                    searchText: params.term, // search term
                    page: params.page
                };
            },
            processResults: function (data, params) {

                params.page = params.page || 1;

                return {
                    results: data.results,
                    pagination: {
                        more: (params.page * 30) < data.total_count
                    }
                };
            },
            cache: true
        }
    });


    $("#HomeClubTechnicalDefeat").on('click',
        function () {

            if ($("#GuestClubTechnicalDefeat").prop('checked') && $("#HomeClubTechnicalDefeat").prop('checked')) {
                $("#GuestClubTechnicalDefeat").prop('checked', false);
            }

            if ($("#GuestClubTechnicalDefeat").prop('checked') || $("#HomeClubTechnicalDefeat").prop('checked')) {
                $("#match-detail").hide();

                if ($("#HomeClubTechnicalDefeat").prop('checked')) {
                    $("#home-club-note").show();
                    $("#guest-club-note").hide();
                } else {
                    $("#home-club-note").hide();
                }

            } else {
                $("#match-detail").show();
                $("#home-club-note").hide();
                $("#guest-club-note").hide();
            }
        });

    $("#GuestClubTechnicalDefeat").on('click',
        function () {

            if ($("#GuestClubTechnicalDefeat").prop('checked') && $("#HomeClubTechnicalDefeat").prop('checked')) {
                $("#HomeClubTechnicalDefeat").prop('checked', false);
            }
            if ($("#GuestClubTechnicalDefeat").prop('checked') || $("#HomeClubTechnicalDefeat").prop('checked')) {
                $("#match-detail").hide();

                if ($("#GuestClubTechnicalDefeat").prop('checked')) {
                    $("#guest-club-note").show();
                    $("#home-club-note").hide();
                } else {
                    $("#guest-club-note").hide();
                }

            } else {
                $("#match-detail").show();
                $("#home-club-note").hide();
                $("#guest-club-note").hide();
            }
        });

</script>